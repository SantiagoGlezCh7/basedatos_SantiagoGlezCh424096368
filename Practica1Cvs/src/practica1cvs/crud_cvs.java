
package practica1cvs;
import java.util.List;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static practica1cvs.Practica1Cvs.leerCSV;




public class crud_cvs extends javax.swing.JFrame {

    /**
     * Creates new form crud_cvs
     */
    
    
    public crud_cvs() {
        setTitle("Mi Ventana CRUD CSV"); // Ejemplo de título
        setSize(600, 400);              // Ejemplo de tamaño
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Button_guardar = new javax.swing.JButton();
        Button_eliminar = new javax.swing.JButton();
        Button_actualizar = new javax.swing.JButton();
        Button_consultar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        txt_nombre = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        txt_crear_archivo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        Button_guardar.setText("Guardar");
        Button_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_guardarActionPerformed(evt);
            }
        });
        getContentPane().add(Button_guardar);
        Button_guardar.setBounds(200, 410, 79, 25);

        Button_eliminar.setText("Eliminar");
        Button_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(Button_eliminar);
        Button_eliminar.setBounds(320, 410, 79, 25);

        Button_actualizar.setText("Actualizar");
        Button_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_actualizarActionPerformed(evt);
            }
        });
        getContentPane().add(Button_actualizar);
        Button_actualizar.setBounds(460, 410, 110, 25);

        Button_consultar.setText("Consultar ");
        Button_consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_consultarActionPerformed(evt);
            }
        });
        getContentPane().add(Button_consultar);
        Button_consultar.setBounds(610, 410, 110, 25);

        jLabel1.setText("ID ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(70, 110, 50, 50);

        jLabel2.setText("NOMBRE");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(60, 190, 110, 30);

        jLabel3.setText("CANTIDAD");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(50, 300, 70, 30);

        jLabel4.setText("PRECIO");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 250, 100, 30);

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));
        jPanel1.setLayout(null);

        jLabel5.setText("FORMULARIO CREACION DE UN ARCHIVO CVS Y GUARDAR DATOS ");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(40, 20, 450, 60);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(170, 10, 510, 100);
        getContentPane().add(txt_id);
        txt_id.setBounds(120, 130, 110, 22);

        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        getContentPane().add(txt_nombre);
        txt_nombre.setBounds(130, 190, 150, 20);
        getContentPane().add(txt_precio);
        txt_precio.setBounds(130, 260, 150, 22);
        getContentPane().add(txt_cantidad);
        txt_cantidad.setBounds(130, 300, 110, 22);

        jLabel6.setText("Nombre archivo ");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(410, 140, 130, 30);

        jButton5.setText("Crear archivo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(530, 210, 150, 30);
        getContentPane().add(txt_crear_archivo);
        txt_crear_archivo.setBounds(520, 150, 180, 22);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       
        // **Obtener el texto del JTextField llamado txt_crear_archivo**
        String nombreArchivoBase = txt_crear_archivo.getText();
        String nombreArchivoCSV = nombreArchivoBase+ "C:\\Users\\santi\\Downloads" + ".csv";

        if (nombreArchivoBase.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Por favor, ingrese un nombre para el archivo CSV (sin extensión).",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File archivoCSV = new File(nombreArchivoCSV);

        JOptionPane.showMessageDialog(this,
                "Archivo CSV '" + nombreArchivoCSV + "' creado exitosamente.",
                "Éxito", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void Button_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_guardarActionPerformed
        
    String nombreArchivoBase = txt_crear_archivo.getText();
    String nombreArchivoGuardar = nombreArchivoBase + ".csv"; // Añadir la extensión .csv para guardar

    if (nombreArchivoBase.isEmpty()) {
        JOptionPane.showMessageDialog(this,
                "Por favor, ingrese un nombre de archivo en 'Crear Archivo' para guardar los datos.",
                "Error", JOptionPane.ERROR_MESSAGE);
        return; // Salir si el nombre del archivo está vacío
    }

    File archivoGuardar = new File(nombreArchivoGuardar);

    try {
        // Usar FileWriter en modo 'append' para añadir datos al final del archivo si ya existe.
        // Si no quieres añadir y quieres sobreescribir el archivo cada vez, usa 'false' en FileWriter(archivoGuardar, false) o simplemente FileWriter(archivoGuardar)
        FileWriter fileWriter = new FileWriter(archivoGuardar, true);
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

        // Obtener los datos de los campos de texto
        String id = txt_id.getText();
        String nombre = txt_nombre.getText();
        String cantidad = txt_cantidad.getText();
        String precio = txt_precio.getText();

        // **Escribir los datos en formato CSV en una línea**
        // Formato: id,nombre,cantidad,precio
        bufferedWriter.write(id + "," + nombre + "," + cantidad + "," + precio);
        bufferedWriter.newLine(); // Añadir una nueva línea para el siguiente registro

        bufferedWriter.close(); // ¡Cerrar BufferedWriter es importante!

        JOptionPane.showMessageDialog(this,
                "Datos guardados exitosamente en el archivo '" + nombreArchivoGuardar + "'.",
                "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Opcional: Limpiar los campos de texto después de guardar (si lo deseas)
        txt_id.setText("");
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");

    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this,
                "Ocurrió un error al guardar los datos en el archivo '" + nombreArchivoGuardar + "':\n" +
                        ex.getMessage(),
                "Error de E/S", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    
    }//GEN-LAST:event_Button_guardarActionPerformed

    private void Button_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_eliminarActionPerformed
    
            
                String nombreArchivoCSV = txt_crear_archivo.getText() + ".csv";
                String idEliminar = txt_id.getText();

                if (nombreArchivoCSV.isEmpty() || idEliminar.isEmpty()) {
                    JOptionPane.showMessageDialog(crud_cvs.this, "Por favor, ingrese el nombre del archivo y el ID a eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                List<String[]> filasActualizadas = new ArrayList<>();
                List<String[]> filas = leerCSV(nombreArchivoCSV);
             
                boolean encontrado = false;

                
                for (String[] fila : filas) {
                    String idConsultar = null;
                   if (fila.length > 0 && fila[0].equals(idConsultar)) {
                       encontrado = true;
                       txt_nombre.setText(fila[1]);
                       txt_cantidad.setText(fila[2]);
                       txt_precio.setText(fila[3]);
                       JOptionPane.showMessageDialog(crud_cvs.this, "Registro con ID '" + idConsultar + "' encontrado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                       break;
                       }
                     } 
                if (encontrado) {
                    escribirCSV(nombreArchivoCSV, filasActualizadas);
                    JOptionPane.showMessageDialog(crud_cvs.this, "Registro con ID '" + idEliminar + "' eliminado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(crud_cvs.this, "No se encontró ningún registro con ID '" + idEliminar + "'.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            
        
        
    }//GEN-LAST:event_Button_eliminarActionPerformed

    private void Button_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_actualizarActionPerformed
        String nombreArchivoCSV = txt_crear_archivo.getText() + ".csv";
                String idActualizar = txt_id.getText();

                if (nombreArchivoCSV.isEmpty() || idActualizar.isEmpty()) {
                    JOptionPane.showMessageDialog(crud_cvs.this, "Por favor, ingrese el nombre del archivo y el ID a actualizar.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // **Llamada al método leerCSV estático de Practica1Cvs**
                List<String[]> filas = Practica1Cvs.leerCSV(nombreArchivoCSV);
                List<String[]> filasActualizadas = new ArrayList<>();
                boolean encontrado = false;

                for (String[] fila : filas) {
                    if (fila.length > 0 && fila[0].equals(idActualizar)) {
                        encontrado = true;
                        // Actualizar la fila con los datos de los campos de texto
                        fila[1] = txt_nombre.getText();
                        fila[2] = txt_cantidad.getText();
                        fila[3] = txt_precio.getText();
                    }
                    filasActualizadas.add(fila); // Añadir la fila (modificada o no) al nuevo listado
                }

                if (encontrado) {
                    escribirCSV(nombreArchivoCSV, filasActualizadas);
                    JOptionPane.showMessageDialog(crud_cvs.this, "Registro con ID '" + idActualizar + "' actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(crud_cvs.this, "No se encontró ningún registro con ID '" + idActualizar + "'.", "Error", JOptionPane.ERROR_MESSAGE);
                }
        
        
        
        
        
        
    }//GEN-LAST:event_Button_actualizarActionPerformed

    private void Button_consultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_consultarActionPerformed

        String nombreArchivoCSV = txt_crear_archivo.getText() + ".csv";
                String idConsultar = txt_id.getText();

                if (nombreArchivoCSV.isEmpty() || idConsultar.isEmpty()) {
                    JOptionPane.showMessageDialog(crud_cvs.this, "Por favor, ingrese el nombre del archivo y el ID a consultar.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // **Llamada al método leerCSV estático de Practica1Cvs**
                List<String[]> filas = Practica1Cvs.leerCSV(nombreArchivoCSV);
                boolean encontrado = false;

                for (String[] fila : filas) {
                    if (fila.length > 0 && fila[0].equals(idConsultar)) {
                        encontrado = true;
                        txt_nombre.setText(fila[1]);
                        txt_cantidad.setText(fila[2]);
                        txt_precio.setText(fila[3]);
                        JOptionPane.showMessageDialog(crud_cvs.this, "Registro con ID '" + idConsultar + "' encontrado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        break; // Detener la búsqueda una vez encontrado
                    }
                }

                if (!encontrado) {
                    JOptionPane.showMessageDialog(crud_cvs.this, "No se encontró ningún registro con ID '" + idConsultar + "'.", "Error", JOptionPane.ERROR_MESSAGE);
                    limpiarCampos();
                }
        
        
    }//GEN-LAST:event_Button_consultarActionPerformed

      
    
    
    
    
    
    
    
    
    public static void main(String args[]) {
       /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(crud_cvs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(crud_cvs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(crud_cvs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(crud_cvs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new crud_cvs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_actualizar;
    private javax.swing.JButton Button_consultar;
    private javax.swing.JButton Button_eliminar;
    private javax.swing.JButton Button_guardar;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_crear_archivo;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void escribirCSV(String nombreArchivoCSV, List<String[]> filasActualizadas) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
