
package proyectopostgresql;

import static com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type.Int;
import static java.lang.reflect.Array.set;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class prueba extends javax.swing.JFrame {
ConexionPostgreSQL cone=new ConexionPostgreSQL();
Connection conectar= ConexionPostgreSQL.conectar();

    
    public prueba() {
        this.conectar = ConexionPostgreSQL.conectar();
        initComponents();
        // ventana 
        this.setTitle("Registro");
        setSize(600,500);
        this.setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Cerrar programa al salir
        setExtendedState(JFrame.NORMAL); // Asegurar que no inicie minimizada o maximizada
        setVisible(true); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        ButtonGuardar = new javax.swing.JButton();
        Buttonactualizar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        txt_nombre = new javax.swing.JTextField();
        txt_edad = new javax.swing.JTextField();
        txt_apellido = new javax.swing.JTextField();
        txt_direccion = new javax.swing.JTextField();
        txt_telefono = new javax.swing.JTextField();
        txt_correo = new javax.swing.JTextField();
        Button_eliminar = new javax.swing.JButton();
        Button_consultar = new javax.swing.JButton();
        Button_listar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(51, 204, 255));
        jPanel1.setEnabled(false);
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Registro de datos Empleado (primer formulario)");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(200, 40, 520, 50);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(90, 20, 880, 120);

        jPanel2.setBackground(new java.awt.Color(102, 204, 255));
        jPanel2.setLayout(null);

        ButtonGuardar.setText("GUARDAR");
        ButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGuardarActionPerformed(evt);
            }
        });
        jPanel2.add(ButtonGuardar);
        ButtonGuardar.setBounds(100, 230, 89, 30);

        Buttonactualizar.setText("ACTUALIZAR");
        Buttonactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonactualizarActionPerformed(evt);
            }
        });
        jPanel2.add(Buttonactualizar);
        Buttonactualizar.setBounds(210, 230, 100, 30);

        jLabel2.setText("NOMBRE");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(40, 50, 100, 40);

        jLabel3.setText("ID");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(40, 20, 41, 16);

        jLabel4.setText("APELLIDO");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(40, 100, 70, 20);

        jLabel5.setText("CORREO");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(40, 140, 80, 16);

        jLabel6.setText("EDAD");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(340, 60, 70, 20);

        jLabel7.setText("DIRECCION");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(340, 100, 90, 10);

        jLabel8.setText("TELEFONO ");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(340, 140, 80, 20);

        txt_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_idActionPerformed(evt);
            }
        });
        jPanel2.add(txt_id);
        txt_id.setBounds(100, 20, 80, 30);

        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        jPanel2.add(txt_nombre);
        txt_nombre.setBounds(100, 60, 180, 22);

        txt_edad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_edadActionPerformed(evt);
            }
        });
        jPanel2.add(txt_edad);
        txt_edad.setBounds(430, 60, 50, 20);

        txt_apellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_apellidoActionPerformed(evt);
            }
        });
        jPanel2.add(txt_apellido);
        txt_apellido.setBounds(110, 100, 200, 20);
        jPanel2.add(txt_direccion);
        txt_direccion.setBounds(430, 90, 330, 30);
        jPanel2.add(txt_telefono);
        txt_telefono.setBounds(420, 140, 160, 20);
        jPanel2.add(txt_correo);
        txt_correo.setBounds(100, 140, 220, 20);

        Button_eliminar.setText("ELIMINAR");
        Button_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(Button_eliminar);
        Button_eliminar.setBounds(330, 230, 100, 30);

        Button_consultar.setText("CONSULTAR");
        Button_consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_consultarActionPerformed(evt);
            }
        });
        jPanel2.add(Button_consultar);
        Button_consultar.setBounds(450, 230, 120, 30);

        Button_listar.setText("LISTAR");
        Button_listar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_listarActionPerformed(evt);
            }
        });
        jPanel2.add(Button_listar);
        Button_listar.setBounds(640, 230, 79, 25);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Apellido", "Telefono"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(130, 290, 600, 190);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(130, 160, 810, 530);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_idActionPerformed

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreActionPerformed

    private void txt_apellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_apellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_apellidoActionPerformed

    private void txt_edadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_edadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_edadActionPerformed

    private void Button_consultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_consultarActionPerformed
        int id = 0; // Inicializar con un valor por defecto

    try {
        id = Integer.parseInt(txt_id.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error: Ingrese un ID válido para la consulta.");
        return; // Salir del método si hay un error en el formato del ID
    }

    String sql = "SELECT * FROM datos_empleados WHERE id = ?";
    try (Connection con = ConexionPostgreSQL.conectar();
         PreparedStatement ps = con.prepareStatement(sql)) {

        ps.setInt(1, id);

        try (ResultSet resultado = ps.executeQuery()) {
            if (resultado.next()) {
                // Mostrar los datos en los campos de texto
                txt_nombre.setText(resultado.getString("nombre"));
                txt_apellido.setText(resultado.getString("apellidos"));
                txt_edad.setText(String.valueOf(resultado.getInt("edad"))); // Convertir int a String
                txt_direccion.setText(resultado.getString("direccion"));
                txt_telefono.setText(String.valueOf(resultado.getInt("telefono"))); // Convertir int a String
                txt_correo.setText(resultado.getString("correo"));
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ningún registro con ID " + id + ".");

                // Limpiar los campos si no se encuentra el registro
                txt_nombre.setText("");
                txt_apellido.setText("");
                txt_edad.setText("");
                txt_direccion.setText("");
                txt_telefono.setText("");
                txt_correo.setText("");
            }
        }

    } catch (SQLException ex) {
        System.out.println("Error al consultar el registro: " + ex.getMessage());
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al consultar el registro: " + ex.getMessage());
    }
   
    }//GEN-LAST:event_Button_consultarActionPerformed

    private void Button_listarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_listarActionPerformed
       DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    // Limpiar la tabla antes de listar los datos
    model.setRowCount(0);

    String sql = "SELECT * FROM datos_empleados";
    try (Connection con = ConexionPostgreSQL.conectar();
         Statement stmt = con.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        while (rs.next()) {
            // Obtener los datos de cada columna
            String id = String.valueOf(rs.getInt("id"));  // Convertir int a String
            String nombre = rs.getString("nombre");
            String apellidos = rs.getString("apellidos");
            String edad = String.valueOf(rs.getInt("edad")); // Convertir int a String
            String direccion = rs.getString("direccion");
            String telefono = String.valueOf(rs.getInt("telefono")); // Convertir int a String
            String correo = rs.getString("correo");

            // Agregar una nueva fila a la tabla con los datos obtenidos
            model.addRow(new Object[]{id, nombre, apellidos, edad, direccion, telefono, correo});
        }

    } catch (SQLException ex) {
        System.out.println("Error al listar los datos: " + ex.getMessage());
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al listar los datos: " + ex.getMessage());
    }
        
     
    }//GEN-LAST:event_Button_listarActionPerformed

    private void ButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGuardarActionPerformed
         int id = 0, telefono = 0, edad = 0;
    String nombre = txt_nombre.getText();
    String apellido = txt_apellido.getText();
    String direccion = txt_direccion.getText();
    String correo = txt_correo.getText();

    try {
        id = Integer.parseInt(txt_id.getText());
        telefono = Integer.parseInt(txt_telefono.getText());
        edad = Integer.parseInt(txt_edad.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error: Ingrese números válidos en los campos de texto.");
        return;
    }

    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Desea guardar la información?", "Confirmación", JOptionPane.YES_NO_OPTION);
    if (confirmacion == JOptionPane.YES_OPTION) {
        String sql = "INSERT INTO datos_empleados (id, nombre, apellidos, edad, direccion, telefono, correo) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (Connection con = ConexionPostgreSQL.conectar();
             PreparedStatement pasar = con.prepareStatement(sql)) {

            // Verificar si el ID ya existe
            String consultaSql = "SELECT * FROM datos_empleados WHERE id = ?";
            try (PreparedStatement consultaStmt = con.prepareStatement(consultaSql)) {
                consultaStmt.setInt(1, id);
                try (ResultSet resultado = consultaStmt.executeQuery()) {
                    if (resultado.next()) {
                        getToolkit().beep();
                        JOptionPane.showMessageDialog(null, "ID ya existe");
                        txt_id.requestFocus();
                        return; // Importante: salir del método si el ID ya existe
                    }
                }
            }

            pasar.setInt(1, id);

            // Handle potential nulls for String columns
            if (nombre != null && !nombre.isEmpty()) {
                pasar.setString(2, nombre);
            } else {
                pasar.setNull(2, java.sql.Types.VARCHAR); // Or set a default value like ""
            }
            if (apellido != null && !apellido.isEmpty()) {
                pasar.setString(3, apellido);
            } else {
                pasar.setNull(3, java.sql.Types.VARCHAR); // Or set a default value like ""
            }
            pasar.setInt(4, edad);

             if (direccion != null && !direccion.isEmpty()) {
                pasar.setString(5, direccion);
            } else {
                pasar.setNull(5, java.sql.Types.VARCHAR); // Or set a default value like ""
            }
            pasar.setInt(6, telefono);
             if (correo != null && !correo.isEmpty()) {
                pasar.setString(7, correo);
            } else {
                pasar.setNull(7, java.sql.Types.VARCHAR); // Or set a default value like ""
            }
            pasar.executeUpdate();
            JOptionPane.showMessageDialog(null, "Dato insertado con éxito");

            // Limpiar los campos después de guardar
            txt_id.setText("");
            txt_nombre.setText("");
            txt_apellido.setText("");
            txt_edad.setText("");
            txt_direccion.setText("");
            txt_telefono.setText("");
            txt_correo.setText("");

        } catch (SQLException ex) {
            System.out.println("Error al insertar dato: " + ex.getMessage());
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al insertar dato: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "La información no se ha guardado.");
    }
        
    }//GEN-LAST:event_ButtonGuardarActionPerformed

    private void Button_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_eliminarActionPerformed

int id = 0; // Inicializar con un valor por defecto

    try {
        id = Integer.parseInt(txt_id.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error: Ingrese un ID válido para eliminar.");
        return; // Salir del método si hay un error en el formato del ID
    }

    // Mensaje de confirmación antes de eliminar
    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Desea eliminar el registro con ID " + id + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
    if (confirmacion == JOptionPane.YES_OPTION) {
        String sql = "DELETE FROM datos_empleados WHERE id = ?";
        try (Connection con = ConexionPostgreSQL.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, id);

            int filasAfectadas = ps.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(null, "Registro con ID " + id + " eliminado con éxito.");

                // Limpiar los campos después de eliminar
                txt_id.setText("");
                txt_nombre.setText("");
                txt_apellido.setText("");
                txt_edad.setText("");
                txt_direccion.setText("");
                txt_telefono.setText("");
                txt_correo.setText("");

            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ningún registro con ID " + id + ".");
            }

        } catch (SQLException ex) {
            System.out.println("Error al eliminar el registro: " + ex.getMessage());
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al eliminar el registro: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "La eliminación ha sido cancelada.");
    }
        
    }//GEN-LAST:event_Button_eliminarActionPerformed

    private void ButtonactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonactualizarActionPerformed
int id = 0, telefono = 0, edad = 0;

    try {
        id = Integer.parseInt(txt_id.getText());
        telefono = Integer.parseInt(txt_telefono.getText());
        edad = Integer.parseInt(txt_edad.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error: Ingrese valores numéricos válidos para ID, Teléfono y Edad.");
        return; // Salir si hay un error de formato
    }

    String nombre = txt_nombre.getText();
    String apellido = txt_apellido.getText();
    String direccion = txt_direccion.getText();
    String correo = txt_correo.getText();

    // Confirmación antes de actualizar
    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Desea actualizar el registro con ID " + id + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
    if (confirmacion == JOptionPane.YES_OPTION) {
        String sql = "UPDATE datos_empleados SET nombre = ?, apellidos = ?, edad = ?, direccion = ?, telefono = ?, correo = ? WHERE id = ?";
        try (Connection con = ConexionPostgreSQL.conectar();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setString(1, nombre);
            ps.setString(2, apellido);
            ps.setInt(3, edad);
            ps.setString(4, direccion);
            ps.setInt(5, telefono);
            ps.setString(6, correo);
            ps.setInt(7, id);  // ID va al final en la cláusula WHERE

            int filasAfectadas = ps.executeUpdate();

            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(null, "Registro con ID " + id + " actualizado con éxito.");

                // Limpiar los campos después de actualizar
                txt_id.setText("");
                txt_nombre.setText("");
                txt_apellido.setText("");
                txt_edad.setText("");
                txt_direccion.setText("");
                txt_telefono.setText("");
                txt_correo.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ningún registro con ID " + id + " para actualizar.");
            }

        } catch (SQLException ex) {
            System.out.println("Error al actualizar el registro: " + ex.getMessage());
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al actualizar el registro: " + ex.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "La actualización ha sido cancelada.");
    }
       
    }//GEN-LAST:event_ButtonactualizarActionPerformed

   
   
    
    
    
    
    
    
    
    
    
    
    
    
        /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(prueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            prueba frame = new prueba();
            frame.setVisible(true);
        });
    }

    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonGuardar;
    private javax.swing.JButton Button_consultar;
    private javax.swing.JButton Button_eliminar;
    private javax.swing.JButton Button_listar;
    private javax.swing.JButton Buttonactualizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txt_apellido;
    private javax.swing.JTextField txt_correo;
    private javax.swing.JTextField txt_direccion;
    private javax.swing.JTextField txt_edad;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_telefono;
    // End of variables declaration//GEN-END:variables
}
